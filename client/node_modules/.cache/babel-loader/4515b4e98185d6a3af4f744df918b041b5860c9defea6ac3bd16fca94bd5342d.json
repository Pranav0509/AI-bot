{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mydox\\\\OneDrive\\\\Desktop\\\\chatbot-app\\\\client\\\\src\\\\components\\\\Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport \"./Chat.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chat = () => {\n  _s();\n  const [messages, setMessages] = useState([{\n    from: \"bot\",\n    text: \"Hello! How can I help you today?\"\n  }]);\n  const [input, setInput] = useState(\"\");\n  const chatBoxRef = useRef(null);\n  const sendMessage = async e => {\n    e.preventDefault();\n    if (!input.trim()) return;\n    const newMessages = [...messages, {\n      from: \"user\",\n      text: input\n    }];\n    setMessages(newMessages);\n    setInput(\"\");\n    try {\n      const response = await fetch(\"http://localhost:5000/api/chat\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          message: input\n        })\n      });\n      const data = await response.json();\n      if (data !== null && data !== void 0 && data.message) {\n        setMessages(prev => [...prev, {\n          from: \"bot\",\n          text: data.message\n        }]);\n      } else {\n        setMessages(prev => [...prev, {\n          from: \"bot\",\n          text: \"No response from AI.\"\n        }]);\n      }\n    } catch (err) {\n      console.error(\"Error:\", err);\n      setMessages(prev => [...prev, {\n        from: \"bot\",\n        text: \"Something went wrong.\"\n      }]);\n    }\n  };\n  useEffect(() => {\n    var _chatBoxRef$current;\n    (_chatBoxRef$current = chatBoxRef.current) === null || _chatBoxRef$current === void 0 ? void 0 : _chatBoxRef$current.scrollTo(0, chatBoxRef.current.scrollHeight);\n  }, [messages]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        textAlign: \"center\",\n        padding: \"10px\"\n      },\n      children: \"Chat with AI\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      ref: chatBoxRef,\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${msg.from}`,\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: msg.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"input-form\",\n      onSubmit: sendMessage,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Type a message...\",\n        value: input,\n        onChange: e => setInput(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n_s(Chat, \"PfkNJLC2HSf+Njxy0AcFTPLpPmU=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","Chat","_s","messages","setMessages","from","text","input","setInput","chatBoxRef","sendMessage","e","preventDefault","trim","newMessages","response","fetch","method","headers","body","JSON","stringify","message","data","json","prev","err","console","error","_chatBoxRef$current","current","scrollTo","scrollHeight","className","children","style","textAlign","padding","fileName","_jsxFileName","lineNumber","columnNumber","ref","map","msg","index","onSubmit","type","placeholder","value","onChange","target","_c","$RefreshReg$"],"sources":["C:/Users/mydox/OneDrive/Desktop/chatbot-app/client/src/components/Chat.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport \"./Chat.css\";\r\n\r\nconst Chat = () => {\r\n  const [messages, setMessages] = useState([\r\n    { from: \"bot\", text: \"Hello! How can I help you today?\" },\r\n  ]);\r\n  const [input, setInput] = useState(\"\");\r\n  const chatBoxRef = useRef(null);\r\n\r\n  const sendMessage = async (e) => {\r\n    e.preventDefault();\r\n    if (!input.trim()) return;\r\n\r\n    const newMessages = [...messages, { from: \"user\", text: input }];\r\n    setMessages(newMessages);\r\n    setInput(\"\");\r\n\r\n    try {\r\n      const response = await fetch(\"http://localhost:5000/api/chat\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ message: input }),\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (data?.message) {\r\n        setMessages((prev) => [...prev, { from: \"bot\", text: data.message }]);\r\n      } else {\r\n        setMessages((prev) => [...prev, { from: \"bot\", text: \"No response from AI.\" }]);\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Error:\", err);\r\n      setMessages((prev) => [...prev, { from: \"bot\", text: \"Something went wrong.\" }]);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    chatBoxRef.current?.scrollTo(0, chatBoxRef.current.scrollHeight);\r\n  }, [messages]);\r\n\r\n  return (\r\n    <div className=\"chat-container\">\r\n      <h2 style={{ textAlign: \"center\", padding: \"10px\" }}>Chat with AI</h2>\r\n      <div className=\"chat-box\" ref={chatBoxRef}>\r\n        {messages.map((msg, index) => (\r\n          <div key={index} className={`message ${msg.from}`}>\r\n            <span>{msg.text}</span>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <form className=\"input-form\" onSubmit={sendMessage}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Type a message...\"\r\n          value={input}\r\n          onChange={(e) => setInput(e.target.value)}\r\n        />\r\n        <button type=\"submit\">Send</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chat;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}