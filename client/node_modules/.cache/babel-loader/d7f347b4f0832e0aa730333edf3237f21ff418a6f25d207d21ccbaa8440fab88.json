{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mydox\\\\OneDrive\\\\Desktop\\\\chatbot-app\\\\client\\\\src\\\\components\\\\Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './Chat.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chat = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const sendMessage = async () => {\n    if (!input.trim()) return;\n    const userMsg = {\n      text: input,\n      sender: 'user'\n    };\n    setMessages(prev => [...prev, userMsg]);\n    setInput('');\n    try {\n      const res = await fetch('http://localhost:5000/api/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          message: input\n        })\n      });\n      const data = await res.json();\n      setMessages(prev => [...prev, {\n        text: data.reply,\n        sender: 'bot'\n      }]);\n    } catch (err) {\n      setMessages(prev => [...prev, {\n        text: 'Error: Unable to get response.',\n        sender: 'bot'\n      }]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uD83D\\uDCAC Chat with AI\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      children: messages.map((msg, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `msg ${msg.sender}`,\n        children: msg.text\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        onKeyDown: e => e.key === 'Enter' && sendMessage(),\n        placeholder: \"Type a message...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n_s(Chat, \"HDAtGPGcvWga1zf1TBXg51T+tsc=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Chat","_s","messages","setMessages","input","setInput","sendMessage","trim","userMsg","text","sender","prev","res","fetch","method","headers","body","JSON","stringify","message","data","json","reply","err","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","i","type","value","onChange","e","target","onKeyDown","key","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/mydox/OneDrive/Desktop/chatbot-app/client/src/components/Chat.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './Chat.css';\r\n\r\nconst Chat = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [input, setInput] = useState('');\r\n\r\n  const sendMessage = async () => {\r\n    if (!input.trim()) return;\r\n\r\n    const userMsg = { text: input, sender: 'user' };\r\n    setMessages((prev) => [...prev, userMsg]);\r\n    setInput('');\r\n\r\n    try {\r\n      const res = await fetch('http://localhost:5000/api/chat', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ message: input }),\r\n      });\r\n      const data = await res.json();\r\n      setMessages((prev) => [...prev, { text: data.reply, sender: 'bot' }]);\r\n    } catch (err) {\r\n      setMessages((prev) => [...prev, { text: 'Error: Unable to get response.', sender: 'bot' }]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat-container\">\r\n      <h2>ðŸ’¬ Chat with AI</h2>\r\n      <div className=\"chat-box\">\r\n        {messages.map((msg, i) => (\r\n          <div key={i} className={`msg ${msg.sender}`}>{msg.text}</div>\r\n        ))}\r\n      </div>\r\n      <div className=\"input-box\">\r\n        <input\r\n          type=\"text\"\r\n          value={input}\r\n          onChange={(e) => setInput(e.target.value)}\r\n          onKeyDown={(e) => e.key === 'Enter' && sendMessage()}\r\n          placeholder=\"Type a message...\"\r\n        />\r\n        <button onClick={sendMessage}>Send</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chat;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}