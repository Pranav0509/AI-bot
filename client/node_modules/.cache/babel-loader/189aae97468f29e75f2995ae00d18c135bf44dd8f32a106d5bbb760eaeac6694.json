{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mydox\\\\OneDrive\\\\Desktop\\\\chatbot-app\\\\client\\\\src\\\\components\\\\Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport axios from 'axios';\nimport './Chat.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chat() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const messagesEndRef = useRef(null);\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [messages]);\n  const handleSend = async () => {\n    if (!input.trim()) return;\n    const userMessage = {\n      text: input,\n      isUser: true\n    };\n    setMessages(prev => [...prev, userMessage]);\n    setInput('');\n    try {\n      const response = await axios.post('http://localhost:5000/api/chat', {\n        message: input\n      });\n      const aiMessage = {\n        text: response.data.reply,\n        isUser: false\n      };\n      setMessages(prev => [...prev, aiMessage]);\n    } catch (error) {\n      setMessages(prev => [...prev, {\n        text: \"Error: Unable to get response.\",\n        isUser: false\n      }]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Chat with AI\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      children: [messages.map((msg, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: msg.isUser ? 'user-msg' : 'bot-msg',\n        children: msg.text\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        value: input,\n        onChange: e => setInput(e.target.value),\n        onKeyPress: e => e.key === 'Enter' && handleSend(),\n        placeholder: \"Type a message...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSend,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n}\n_s(Chat, \"ub7mF0g0316z3YNHsiLBOML0ce4=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useRef","useEffect","axios","jsxDEV","_jsxDEV","Chat","_s","messages","setMessages","input","setInput","messagesEndRef","_messagesEndRef$curre","current","scrollIntoView","behavior","handleSend","trim","userMessage","text","isUser","prev","response","post","message","aiMessage","data","reply","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","i","ref","value","onChange","e","target","onKeyPress","key","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/mydox/OneDrive/Desktop/chatbot-app/client/src/components/Chat.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport './Chat.css';\r\n\r\nfunction Chat() {\r\n  const [messages, setMessages] = useState([]);\r\n  const [input, setInput] = useState('');\r\n  const messagesEndRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  }, [messages]);\r\n\r\n  const handleSend = async () => {\r\n    if (!input.trim()) return;\r\n\r\n    const userMessage = { text: input, isUser: true };\r\n    setMessages((prev) => [...prev, userMessage]);\r\n    setInput('');\r\n\r\n    try {\r\n      const response = await axios.post('http://localhost:5000/api/chat', { message: input });\r\n      const aiMessage = { text: response.data.reply, isUser: false };\r\n      setMessages((prev) => [...prev, aiMessage]);\r\n    } catch (error) {\r\n      setMessages((prev) => [...prev, { text: \"Error: Unable to get response.\", isUser: false }]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat-container\">\r\n      <h2>Chat with AI</h2>\r\n      <div className=\"chat-box\">\r\n        {messages.map((msg, i) => (\r\n          <div key={i} className={msg.isUser ? 'user-msg' : 'bot-msg'}>\r\n            {msg.text}\r\n          </div>\r\n        ))}\r\n        <div ref={messagesEndRef} />\r\n      </div>\r\n      <div className=\"chat-input\">\r\n        <input\r\n          value={input}\r\n          onChange={(e) => setInput(e.target.value)}\r\n          onKeyPress={(e) => e.key === 'Enter' && handleSend()}\r\n          placeholder=\"Type a message...\"\r\n        />\r\n        <button onClick={handleSend}>Send</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chat;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAC1D,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpB,SAASC,IAAIA,CAAA,EAAG;EAAAC,EAAA;EACd,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAMY,cAAc,GAAGX,MAAM,CAAC,IAAI,CAAC;EAEnCC,SAAS,CAAC,MAAM;IAAA,IAAAW,qBAAA;IACd,CAAAA,qBAAA,GAAAD,cAAc,CAACE,OAAO,cAAAD,qBAAA,uBAAtBA,qBAAA,CAAwBE,cAAc,CAAC;MAAEC,QAAQ,EAAE;IAAS,CAAC,CAAC;EAChE,CAAC,EAAE,CAACR,QAAQ,CAAC,CAAC;EAEd,MAAMS,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI,CAACP,KAAK,CAACQ,IAAI,CAAC,CAAC,EAAE;IAEnB,MAAMC,WAAW,GAAG;MAAEC,IAAI,EAAEV,KAAK;MAAEW,MAAM,EAAE;IAAK,CAAC;IACjDZ,WAAW,CAAEa,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAEH,WAAW,CAAC,CAAC;IAC7CR,QAAQ,CAAC,EAAE,CAAC;IAEZ,IAAI;MACF,MAAMY,QAAQ,GAAG,MAAMpB,KAAK,CAACqB,IAAI,CAAC,gCAAgC,EAAE;QAAEC,OAAO,EAAEf;MAAM,CAAC,CAAC;MACvF,MAAMgB,SAAS,GAAG;QAAEN,IAAI,EAAEG,QAAQ,CAACI,IAAI,CAACC,KAAK;QAAEP,MAAM,EAAE;MAAM,CAAC;MAC9DZ,WAAW,CAAEa,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAEI,SAAS,CAAC,CAAC;IAC7C,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdpB,WAAW,CAAEa,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAE;QAAEF,IAAI,EAAE,gCAAgC;QAAEC,MAAM,EAAE;MAAM,CAAC,CAAC,CAAC;IAC7F;EACF,CAAC;EAED,oBACEhB,OAAA;IAAKyB,SAAS,EAAC,gBAAgB;IAAAC,QAAA,gBAC7B1B,OAAA;MAAA0B,QAAA,EAAI;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACrB9B,OAAA;MAAKyB,SAAS,EAAC,UAAU;MAAAC,QAAA,GACtBvB,QAAQ,CAAC4B,GAAG,CAAC,CAACC,GAAG,EAAEC,CAAC,kBACnBjC,OAAA;QAAayB,SAAS,EAAEO,GAAG,CAAChB,MAAM,GAAG,UAAU,GAAG,SAAU;QAAAU,QAAA,EACzDM,GAAG,CAACjB;MAAI,GADDkB,CAAC;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEN,CACN,CAAC,eACF9B,OAAA;QAAKkC,GAAG,EAAE3B;MAAe;QAAAoB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzB,CAAC,eACN9B,OAAA;MAAKyB,SAAS,EAAC,YAAY;MAAAC,QAAA,gBACzB1B,OAAA;QACEmC,KAAK,EAAE9B,KAAM;QACb+B,QAAQ,EAAGC,CAAC,IAAK/B,QAAQ,CAAC+B,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;QAC1CI,UAAU,EAAGF,CAAC,IAAKA,CAAC,CAACG,GAAG,KAAK,OAAO,IAAI5B,UAAU,CAAC,CAAE;QACrD6B,WAAW,EAAC;MAAmB;QAAAd,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAChC,CAAC,eACF9B,OAAA;QAAQ0C,OAAO,EAAE9B,UAAW;QAAAc,QAAA,EAAC;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAAC5B,EAAA,CA/CQD,IAAI;AAAA0C,EAAA,GAAJ1C,IAAI;AAiDb,eAAeA,IAAI;AAAC,IAAA0C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}