{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mydox\\\\OneDrive\\\\Desktop\\\\chatbot-app\\\\client\\\\src\\\\components\\\\Chat.js\",\n  _s = $RefreshSig$();\n// client/src/components/Chat.js\nimport React, { useState, useRef, useEffect } from 'react';\nimport axios from 'axios';\nimport './Chat.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chat() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const messagesEndRef = useRef(null);\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [messages]);\n  const sendMessage = async () => {\n    if (!input.trim()) return;\n    const newMessages = [...messages, {\n      from: 'user',\n      text: input\n    }];\n    setMessages(newMessages);\n    setInput('');\n    try {\n      const response = await axios.post('http://localhost:5000/api/chat', {\n        message: input\n      });\n      setMessages([...newMessages, {\n        from: 'bot',\n        text: response.data.reply\n      }]);\n    } catch (err) {\n      setMessages([...newMessages, {\n        from: 'bot',\n        text: 'Error: Unable to get response.'\n      }]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Chat with AI\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      children: [messages.map((msg, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: msg.from === 'user' ? 'user-msg' : 'bot-msg',\n        children: msg.text\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        value: input,\n        onChange: e => setInput(e.target.value),\n        onKeyDown: e => e.key === 'Enter' && sendMessage(),\n        placeholder: \"Type a message...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\n_s(Chat, \"ub7mF0g0316z3YNHsiLBOML0ce4=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useRef","useEffect","axios","jsxDEV","_jsxDEV","Chat","_s","messages","setMessages","input","setInput","messagesEndRef","_messagesEndRef$curre","current","scrollIntoView","behavior","sendMessage","trim","newMessages","from","text","response","post","message","data","reply","err","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","idx","ref","value","onChange","e","target","onKeyDown","key","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/mydox/OneDrive/Desktop/chatbot-app/client/src/components/Chat.js"],"sourcesContent":["// client/src/components/Chat.js\r\nimport React, { useState, useRef, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport './Chat.css';\r\n\r\nfunction Chat() {\r\n  const [messages, setMessages] = useState([]);\r\n  const [input, setInput] = useState('');\r\n  const messagesEndRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  }, [messages]);\r\n\r\n  const sendMessage = async () => {\r\n    if (!input.trim()) return;\r\n\r\n    const newMessages = [...messages, { from: 'user', text: input }];\r\n    setMessages(newMessages);\r\n    setInput('');\r\n\r\n    try {\r\n      const response = await axios.post('http://localhost:5000/api/chat', {\r\n        message: input,\r\n      });\r\n\r\n      setMessages([...newMessages, { from: 'bot', text: response.data.reply }]);\r\n    } catch (err) {\r\n      setMessages([...newMessages, { from: 'bot', text: 'Error: Unable to get response.' }]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat-container\">\r\n      <h2>Chat with AI</h2>\r\n      <div className=\"chat-box\">\r\n        {messages.map((msg, idx) => (\r\n          <div key={idx} className={msg.from === 'user' ? 'user-msg' : 'bot-msg'}>\r\n            {msg.text}\r\n          </div>\r\n        ))}\r\n        <div ref={messagesEndRef}></div>\r\n      </div>\r\n      <div className=\"chat-input\">\r\n        <input\r\n          value={input}\r\n          onChange={(e) => setInput(e.target.value)}\r\n          onKeyDown={(e) => e.key === 'Enter' && sendMessage()}\r\n          placeholder=\"Type a message...\"\r\n        />\r\n        <button onClick={sendMessage}>Send</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chat;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}